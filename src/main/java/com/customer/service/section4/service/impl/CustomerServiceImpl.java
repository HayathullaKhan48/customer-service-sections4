package com.customer.service.section4.service.impl;

import com.customer.service.section4.entity.CustomerModel;
import com.customer.service.section4.repository.CustomerRepository;
import com.customer.service.section4.request.CustomerRequest;
import com.customer.service.section4.service.CustomerService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.security.SecureRandom;

/**
 * Implementation of CustomerService containing business logic
 * for customer operations
 */
@Service //Spring service component
@RequiredArgsConstructor // Lombok constructor injection
public class CustomerServiceImpl implements CustomerService {
    private static final String ACTIVE = "active"; //Default customer status
    private final CustomerRepository customerRepository; //Data access dependency

    /**
     * Creates a new customer with autogenerated password
     * @param request Customer details for creation request
     * @return Success message
     */
    @Override
    public String createCustomer(CustomerRequest request) {
        CustomerModel customerModel = requestToModelConverter(request);
        customerRepository.saveAndFlush(customerModel);
        return "successfully registered...";
    }

    /**
     * Converts CustomerRequest Data transfer object to customerModel entity
     * Sets default status and generates random password
     * @param request Request Data transfer object
     * @return fully populated entity
     */
    private static CustomerModel requestToModelConverter(CustomerRequest request) {
        return CustomerModel.builder()
                .username(request.getUsername())
                .mobileNumber(request.getMobileNumber())
                .emailAddress(request.getEmailAddress())
                .customerAge(request.getCustomerAge())
                .userStatus(ACTIVE)
                .password(generatePassword())
                .build();
    }

    /**
     * Generates a random 10-character password
     * Contains at least one uppercase, one lowercase, one digit and one special character
     * @return Generated password
     */
    public static String generatePassword() {
        int length = 10;
        // Character sets
        String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String lower = "abcdefghijklmnopqrstuvwxyz";
        String digits = "0123456789";
        String special = "!@#$%^&*()-_+=<>?";

        // Combine all characters
        String allChars = upper + lower + digits + special;

        SecureRandom random = new SecureRandom();
        StringBuilder password = new StringBuilder();

        // Ensure at least one from each category
        password.append(upper.charAt(random.nextInt(upper.length())));
        password.append(lower.charAt(random.nextInt(lower.length())));
        password.append(digits.charAt(random.nextInt(digits.length())));
        password.append(special.charAt(random.nextInt(special.length())));

        // Fill the remaining length
        for (int i = 4; i < length; i++) {
            password.append(allChars.charAt(random.nextInt(allChars.length())));
        }

        return password.toString();
    }
}
